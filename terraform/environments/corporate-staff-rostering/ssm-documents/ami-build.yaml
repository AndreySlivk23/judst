---
schemaVersion: "2.2"
description: "SSM Document to convert an Azure VM into an AWS AMI." 
parameters:
  InstanceId:
    type: "String"
    description: "ID of the MGN replicated Azure server"
  VolumeId:
    type: "String"
    description: "Root volume ID to be snapshotted"
  SnapshotName:
    type: "String"
    description: "Name of the resultant snapshot"
  AMIName:
    type: "String"
    description: "Name of the AMI being built"

mainSteps:
  - name: installAWSToolsForPowershell
    action: aws:runPowerShellScript
    inputs:
      runCommand:
        - |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Import-Module AWSPowerShell - Force

  - name: CreateSnapshot 
    action: aws:runPowerShellScript
    precondition:
      StringEquals:
        - platformType
        - Windows
    inputs:
      runCommand:
        - |
          $volumeID = "{{VolumeId}}"
          $snapshotName = "{{SnapshotName}}"
          New-EC2Snapshot -VolumeID $volumeID -Description $snapshotName

  # - name: CreateSnapshot 
  #   action: aws:executeAWSApi
  #   onFailure: exit 
  #   inputs:
  #     Service: EC2
  #     API: CreateSnapshot
  #     VolumeId: "{{ VolumeId }}"
  #     Description: "{{ SnapshotName }}"
  #   outputs:
  #   - Name: SnapshotID
  #     Selector: SnapshotId
  #     Type: String

  # - name: verifySnapshot
  #   action: aws:waitForAwsResourceProperty
  #   inputs:
  #     Service: ec2
  #     Api: DescribeSnapshots
  #     SnapshotIds: ["{{createSnapshot.Payload}}"] # references the captured snapshot ID
  #     PropertySelector: Snapshots[0].State
  #     DesiredValues:
  #     - completed

  - name: getRootVolumeSpace
    action: aws:runPowerShellScript
    maxAttempts: 1
    inputs:
      runCommand:
        - |
          $rootVolume = Get-WmiObject -Query "SELECT * FROM Win32_LogicalDisk WHERE DeviceID = 'C:'"
          $availableSpaceGB = [math]::Round(($rootVolume.FreeSpace / 1GB), 2)
          $totalSpaceGB = [math]::Round(($rootVolume.Size / 1GB), 2) # good 
          $availablePercentage = [math]::Round((($availableSpaceGB / $totalSpaceGB) * 100), 2)
          Write-Output "Available space on the C drive is $availableSpaceGB GB, which is $availablePercentage% % of the total space"
          if ($availablePercentage% -lt 50) {
            Write-Output "Available disk space is less than 50%; stopping AMI build."
            Exit 1
          } else {
            Write-Output "Available disk space is more than 50%; Continuing with AMI build"
          }

  - name: awsDiscoveryAgent
    action: aws:runPowerShellScript 
    inputs:
      runCommand:
        - |
          $output = Try {
          Stop-Service -Name 'AWSDiscoveryService'-ErrorAction Stop 
          } Catch {
            $errorOutput = $_.Exception.Message
          }
          ($errorOutput -eq "Cannot find any service with service name 'AWSDiscoveryService'.") {
            Write-Host "No Discovery Agent installed"
          } elif ($errorOutput -eq $null) {
            cmd.exe /c "wmic product where name='AWS Discovery Agent' call uninstall"
          }

  - name: activeDirectoryModulePresent
    action: aws:runPowerShellScript
    inputs: 
      runCommand:
        - |
          $module = Get-Module -ListAvailable -Name ActiveDirectory
          if (-not $module) {
            Write-Host "Active Directory module is not installed, installing now..."
            Install-WindowsFeature -Name "RSAT-AD-PowerShell" -IncludeAllSubFeature
          } else {
            Write-Host "Active Directory module is already installed." 

  - name: InstallEC2LaunchV2
    action: aws:configurePackage
    inputs: 
      name: AWSEC2Launch-Agent
      action: install
  
  - name: verifyEC2LaunchV2Installation
    action: aws:runPowerShellScript
    inputs:
      runCommand:
        - |
          if (Get-Service -Name "Amazon EC2Launch"| Where-Object {$_.Status -eq 'Running'}) {
            Write-Output "EC2LaunchV2 driver installed and running successfully."
          } else {
            Write-Output "EC2LaunchV2 driver installation or service startup failed."
          }

  - name: createImage
    action: aws:createImage
    onFailure: exit
    inputs:
      InstanceID: "{{ InstanceId }}"
      ImageName: "{{ AMIName }}"
      NoReboot: true
    outputs:
    - Name: Image-ID
      Selector: ImageId
      Type: String